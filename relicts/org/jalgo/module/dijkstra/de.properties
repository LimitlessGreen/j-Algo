Module_name=Dijkstra
Module_version=1.0
Module_authors=Frank Staudinger, Julian Stecklina, Hannes Stra\u00DF, Steven Voigt, Martin Winter
Module_description_1=Dieses Modul behandelt Dijkstra's Algorithmus zum Finden k\u00FCrzester Wege in Graphen.
Module_description_2=Es k\u00F6nnen Graphen modelliert werden, der Algorithmus wird intuitiv visualisiert.
Module_license=GNU General Public License
EdgeListParser.Syntax_error_1=Kantenliste: Syntaxfehler im Eingabestring: 
EdgeListParser.Syntax_error_2=Syntaxfehler in der Kantenliste: (
EdgeListParser.Syntax_error_3=). Erwartet: (Startknoten, Gewicht, Endknoten).
EdgeListParser.Syntax_hint_1=Kantenliste muss mit "{" beginnen\!
EdgeListParser.Syntax_hint_2=Kantenliste muss auf "}" enden\!
EdgeListParser.Syntax_hint_3=Kante muss mit "(" beginnen\!
EdgeListParser.Syntax_hint_4=Kante muss auf "(" enden\!
EdgeListParser.Syntax_hint_5=Kanten m\u00FCssen mit "," getrennt werden\!
EdgeListParser.Syntax_hint_6=Einzelne Elemente innerhalb der Kante m\u00FCssen mit "," getrennt werden\!
EdgeListComposite.Tooltip=Textfeld zur Eingabe der Kantenliste aus Tupeln (Knoten 1, Kantengewicht, Knoten 2). Beispiel: (1, 5, 2), (2, 4, 3), (3, 6, 1)
EdgeListComposite.Apply=Anwenden
EdgeListParser.Syntax_error_4=Unerwartetes Ende des Eingabestrings\! Erwartet: Startknoten.
EdgeListParser.Syntax_error_5=Unerwartetes Ende des Eingabestrings\! Erwartet: Endknoten.
EdgeListComposite.Apply_description=\u00C4nderungen an der Kantenliste \u00FCbernehmen und Graph neu darstellen.
NodeListParser.Syntax_error_1=Knotenliste: Syntaxfehler im Eingabestring: "
NodeListParser.Syntax_hint_1=Knotenliste muss mit "{" beginnen\!
NodeListParser.Syntax_hint_2=Knotenliste muss auf "}" enden\!
NodeListParser.Syntax_error_2=Unerwartetes Ende des Eingabestrings\! Erwartet: Knoten.
NodeListParser.Syntax_error_3=Kein zul\u00E4ssiger Knoten: 
NodeListComposite.Apply_description=\u00C4nderungen an der Knotenliste \u00FCbernehmen und Graph neu darstellen.
NodeListParser.Syntax_hint_3=\! Nur Dezimalzahlen von 1 - 9 erlaubt.
NodeListParser.Syntax_hint_4=Knoten m\u00FCssen mit "," getrennt werden\!
NodeListComposite.Tooltip=Textfeld zur Eingabe der durch Komma getrennten Knotenliste. Beispiel: 1, 2, 3, 4
NodeListComposite.Apply=Anwenden
DijkstraAlgorithm.Node=Knoten 
DijkstraAlgorithm.Is_over=\ ist \u00FCber 
DijkstraAlgorithm.Reachable_on_shorter_path=\ auf einem k\u00FCrzeren Wege erreichbar.
DijkstraAlgorithm.Reachable_over_existing_path_shorter=\ ist \u00FCber den bestehenden Weg k\u00FCrzer zu erreichen.
DijkstraAlgorithm.New_node=Neuer Knoten im Rand: 
DijkstraAlgorithm.Error_1=Predecessor of border node is null
DijkstraAlgorithm.Error_2=Node equals predecessor
DijkstraAlgorithm.Choosed_as_start_node=\ als Startknoten gew\u00E4hlt.
DijkstraAlgorithm.Fringe_complete_for_start_node=Randknotenmenge f\u00FCr Startknoten komplett.
DijkstraAlgorithm.New_choosen=Neuer gew\u00E4hlter 
DijkstraAlgorithm.Fringe_complete=Randknotenmenge komplett
DijkstraAlgorithm.Algorithm_finished=Algorithmus beendet
AlgorithmCalculationTableComposite.Chosen=Gew\u00E4hlt
AlgorithmResultTableComposite.Target_node=Zielknoten
AlgorithmResultTableComposite.Path_length=Wegl\u00E4nge
AlgorithmModeMainComposite.Calc_table=Rechentableau
AlgorithmModeToolsComposite.Start_node=Startknoten:
AlgorithmModeToolsComposite.Algorithm_step=Algorithmusschritt:
AlgorithmModeToolsComposite.Start_animation=Animation starten
AlgorithmResultTableComposite.Shortest_path=k\u00FCrzester Weg
AlgorithmCalculationTableComposite.Fringe_node=Randknoten
AlgorithmModeMainComposite.Tools=Werkzeuge
AlgorithmModeMainComposite.Graph=Graph
AlgorithmModeToolsComposite.Of=von 
AlgorithmModeMainComposite.Result=Ergebnis
AlgorithmModeToolsComposite.Go_to=Gehe zu
EditModeMainComposite.Tools=Werkzeuge
EditModeMainComposite.Node_list=Knotenliste
EditModeMainComposite.Graph=Graph
EditModeMainComposite.Edge_list=Kantenliste
EditModeMainComposite.Distance_matrix=Distanzmatrix
EditModeToolsComposite.Add_move_node=Knoten hinzuf\u00FCgen/verschieben
EditModeToolsComposite.Add_move_node_tooltip=Mit dem Werkzeug \u201EKnoten hinzuf\u00FCgen/verschieben\u201C k\u00F6nnen neue Knoten durch Klicken auf die Zeichenfl\u00E4che erzeugt sowie vorhandene Knoten durch Klicken und Ziehen verschoben werden.
EditModeToolsComposite.Add_eval_edge=Kante hinzuf\u00FCgen/bewerten
EditModeToolsComposite.Add_eval_edge_tooltip=Mit dem Werkzeug \u201EKante hinzuf\u00FCgen/bewerten\u201C k\u00F6nnen neue Kanten zwischen Knoten gezogen sowie vorhandene Kantengewichte durch Klicken und Ziehen auf die Gewichtszahl ver\u00E4ndert werden.
EditModeToolsComposite.Remove_node=Knoten l\u00F6schen
EditModeToolsComposite.Remove_node_tooltip=Mit dem Werkzeug \u201EKnoten l\u00F6schen\u201C k\u00F6nnen Knoten durch Anklicken entfernt werden.
EditModeToolsComposite.Remove_edge=Kante l\u00F6schen
EditModeToolsComposite.Remove_edge_tooltip=Mit dem Werkzeug \u201EKante l\u00F6schen\u201C k\u00F6nnen Kanten durch Klicken auf die Gewichtszahl entfernt werden.
GraphComposite.Arrange_nodes_automatically=Knoten automatisch anordnen
GraphComposite.Arrange_tooltip=Alle Knoten automatisch in einem regelm\u00E4\u00DFigen Vieleck anordnen.
MatrixComposite.Tooltip=Eingabe von Kantengewichten zwischen je zwei Knoten. Gewichte werden automatisch zur Hauptdiagonale symmetrisch erg\u00E4nzt, da Graph ungerichtet ist. Kante l\u00F6schen durch Eingabe von Minus (-).
MatrixComposite.Apply=Anwenden
MatrixComposite.Apply_description=\u00C4nderungen an der Matrix \u00FCbernehmen und Graph neu darstellen.
RedoToolBarAction.Redo=Wiederherstellen
StatusbarComposite.Start_algorithm=Algorithmus starten
StatusbarComposite.Edit_graph=Graph bearbeiten
StatusbarComposite.Restart_algorithm=Algorithmus neu starten
UndoToolBarAction.Undo=R\u00FCckg\u00E4ngig
UndoToolBarAction.Undo_tooltip=Macht die letzte \u00C4nderung r\u00FCckg\u00E4ngig.
FileAction.Graph_object=Graph Objekt (*.graph)
FileAction.All_files=Alle Dateien (*.*)
