\documentclass[12pt]{article}
\usepackage{a4wide, listings, url}
\usepackage[latin1]{inputenc}
 
\title{J-Algo\\Module Programmers Manual}
\author{Stephan Creutz, Michael Pradel}
\date{\today}

\newcommand{\code}[1]{\lstinline$#1$}

% Synopsis
% Description
% Examples
% Overview
% Authors
% Reporting Bugs
% See Also
% Copyright

\begin{document}
\maketitle
\lstset{basicstyle=\small,language=Java,showstringspaces=false}
\section{Introduction to jAlgo}
J-Algo was developed to provide multiple module support. Each module should cover one topic (e.g. tree algorithms or EBNF). For this reason we created a simple interface. This interface is described in the sections below.\\
The software is using the following toolkits: SWT, JFace and Draw2d (see section \ref{seealso}), thus you have to use it too. But it might be possible to write an adapter which makes it possible to use e.g. Swing or something else.

\section{Implementing a module}

To implement a new J-Algo module, create a directory with your modules name in /source/org/jalgo/module. This directory has to contain at least two classes: ModuleConnector.java implementing the interface IModuleConnector and ModuleInfo.java implementing the interface IModuleInfo.\\
In order to help you to write a new module, there is an minimalistic module called testModule. It is a correctly implemented J-Algo module, but does nothing. You can use it as a skeleton for any new module.

\subsection{IModuleConnector}
This interface establishes a connection to the main program.
You have to implement the methods listed below:

\begin{lstlisting}[frame=single,caption={IModuleConnector}]
public interface IModuleConnector {

	/**
	 * use this function after the user loaded a saved file for
	 * the module.
	 * @param data the loaded file consists of the module header,
	 * which was added by the main program before saving (e.g.
	 * including with which module the file is associated) and the
	 * data for the module; put the data in here
	 */
	public void setDataFromFile(ByteArrayInputStream data);

	/**
	 * use this function, when the user wants to save the state
	 * of the module.
	 * @return a stream with the data from the module, that has
	 * to be stored in a file after the main program added the
	 * module header (e.g. including with which module the file
	 * is associated) to it
	 */
	public ByteArrayOutputStream getDataForFile();

	/**
	 * use this function, if the user clicked the print-button
	 * (or chose to print in any other way)
	 * the module will call a print dialog and manage the printing
	 *
	 * NOTE !!! this is currently unused
	 */
	public void print();

	/**
	 * Get the Menu from the module
	 */
	public SubMenuManager getMenuManager();

	/**
	 * Get the ToolBar from the module
	 */
	public SubToolBarManager getToolBarManager();

	/**
	 * Get the StatusLine from the module
	 */
	public SubStatusLineManager getStatusLineManager();
	
	/**
	 * Get a class with all module information (name, description,
	 * version, ...)
	 */
	public IModuleInfo getModuleInfo();

}
\end{lstlisting}

\subsection{ModuleConnector from testModule}

% TODO: wie wird print() umgesetzt, momentan wird dies am interface vorbei gemacht
\begin{lstlisting}[frame=single,caption={IModuleInfo interface}]
public class ModuleConnector implements IModuleConnector {

    private ModuleInfo moduleInfo;

    private ApplicationWindow appWin;
    private Composite comp;
    private SubMenuManager menuManager;
    private SubToolBarManager toolBarManager;
    private SubStatusLineManager statusLineManager;
    
    public ModuleConnector(
	ApplicationWindow appWin,
	Composite comp,
	SubMenuManager menu,
	SubToolBarManager tb,
	SubStatusLineManager sl) {
	    
	moduleInfo = new ModuleInfo();
	    
	this.appWin = appWin;
	this.comp = comp;
	this.menuManager = menu;
	this.toolBarManager = tb;
	this.statusLineManager = sl;
    }
    
    public void run() {
        System.err.println("testModule is running");
    }

    public void setDataFromFile(ByteArrayInputStream data) {
        
    }

    public ByteArrayOutputStream getDataForFile() {
        return null;
    }

    public void print() {

    }

    public SubMenuManager getMenuManager() {
        return menuManager;
    }

    public SubToolBarManager getToolBarManager() {
        return toolBarManager;
    }

    public SubStatusLineManager getStatusLineManager() {
        return statusLineManager;
    }

    public IModuleInfo getModuleInfo() {
        return moduleInfo;
    }
}
\end{lstlisting}

\subsection{IModuleInfo}
The class which implements this interface provides some basic information about the module. The class yields the name, version, author(s), license, description and a logo. Furthermore it holds the information about open files.

\begin{lstlisting}[frame=single,caption={IModuleInfo interface}]
import org.eclipse.swt.graphics.Image;

public interface IModuleInfo {
	public abstract String getName();
	public abstract String getVersion();
	public abstract String getAuthor();
	public abstract String getDescription();
	public abstract Image getLogo();
	public abstract String getLicense();
	
	/**
	 * Get the filename of the currently opened file.
	 * @return filename
	 */
	public abstract String getOpenFileName();
	/**
	 * Set the filename of the currently opened file.
	 * @param string filename
	 */
	public abstract void setOpenFileName(String string);
}
\end{lstlisting}

\subsection{ModuleInfo from testModule}
Here is a concrete example for a class implementing the \code{IModuleInfo} interface.

\begin{lstlisting}[frame=single,caption={Sample ModuleInfo Code}]
public class ModuleInfo implements IModuleInfo {

    public String getName() {
        return "testModule";
    }

    public String getVersion() {
        return "0.1";
    }

    public String getAuthor() {
        return "Your Name";
    }

    public String getDescription() {
        return "a module for testing purposes";
    }

    public ImageDescriptor getLogo() {
        return ImageDescriptor.createFromFile(null, "pix/new.gif");
    }

    public String getLicense() {
        return "GPL";
    }

    public String getOpenFileName() {
        return null;
    }

    public void setOpenFileName(String string) {

    }
}
\end{lstlisting}

If this is too easy for you, just have a look at the module called synDiaEBNF ;-) 

\section{Bind the module to the main program}
Binding a new module to the main program is really easy: You only have to add two lines into the class /src/org/jalgo/main/JalgoMain.java. You should find the method addKnownModules:
\begin{lstlisting}[frame=single,caption={JalgoMain.addKnownModules()}]
public void addKnownModules() {
	try {
		knownModules.add(ModuleConnector.class);
		knownModules.add(org.jalgo.module.testModule.ModuleConnector.class);
		//Add a new ModuleConnector here!!
	} catch (Exception e) {
		e.printStackTrace();
	}
	knownModuleInfos.add(new ModuleInfo());
	knownModuleInfos.add(new org.jalgo.module.testModule.ModuleInfo());
	//Add a new ModuleInfo here!!
}
\end{lstlisting}

Please use the complete path to your classes!\\

\section{Known bugs}
\begin{itemize}
\item The method \code{public void print()} is unused and senseless in the moment.
\end{itemize}

\section{Reporting bugs}
If you find a bug please be so kind to drop us an email (\url{j-algo-development@lists.sourceforge.net}).

\section{See also}\label{seealso}
To program a module you need information about SWT, JFace and Draw2d. This can be found at \url{http://www.eclipse.org}.\\
More detailed information can be found in the source code.

\end{document}

